using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using Antlr4.Runtime;
using Antlr4.Runtime.Tree;
using Antlr4.Runtime.Misc;

namespace JavaCSharp
{

    public class JavaVisitor : JavaParserBaseVisitor<object>
    {
        //For Storing C Code
      
        private List<String> C = new List<string>();

       /* public List<String> C
        {
            get { return C; }
        }*/
       
        //For Indents
        public int[] indentCount = new int[0];

        public void indents()
        {
            for (int i = 0; i < indentCount[0]; i++)
            {
                C.Add("\t");
            }
        }

        public override object VisitCompilationUnit([NotNull] JavaParser.CompilationUnitContext context)
        {
            return VisitChildren(context);
        }
        public override object VisitClassDeclaration([NotNull] JavaParser.ClassDeclarationContext context)
        {
            Console.Write(context.GetChild(0).GetText() + " ");
            Console.Write(context.GetChild(1).GetText() + "\n");
            return VisitChildren(context);

        }
        public override object VisitTypeDeclaration([NotNull] JavaParser.TypeDeclarationContext context)
        {
            return VisitChildren(context);
        }
        public override object VisitClassOrInterfaceModifier([NotNull] JavaParser.ClassOrInterfaceModifierContext context)
        {
            //C.Add(context.GetText());
            //Console.WriteLine(C);
            Console.Write(context.GetChild(0).GetText() + " ");
            return VisitChildren(context);
        }
        public override object VisitClassBody([NotNull] JavaParser.ClassBodyContext context)
        {
            Console.Write(context.GetChild(0).GetText() + "\n");
            return VisitChildren(context);
        }
        public override object VisitClassBodyDeclaration([NotNull] JavaParser.ClassBodyDeclarationContext context)
        {
            return VisitChildren(context);
        }
        public override object VisitModifier([NotNull] JavaParser.ModifierContext context)
        {

            return VisitChildren(context);
        }
        public override object VisitMemberDeclaration([NotNull] JavaParser.MemberDeclarationContext context)
        {

            return VisitChildren(context);
        }
        public override object VisitMethodDeclaration([NotNull] JavaParser.MethodDeclarationContext context)
        {
            Console.Write(context.GetChild(0).GetText() + " ");
            Console.Write(context.GetChild(1).GetText() + " "); 
            Console.Write(context.GetChild(2).GetText() + "\n");
            return VisitChildren(context);
        }
        public override object VisitTypeTypeOrVoid([NotNull] JavaParser.TypeTypeOrVoidContext context)
        {
            //Console.Write(context.GetText() +" ");
            return VisitChildren(context);
        }
        public override object VisitFormalParameter([NotNull] JavaParser.FormalParameterContext context)
        {
            //Console.Write(context.GetText());
            return VisitChildren(context);
        }
        public override object VisitMethodBody([NotNull] JavaParser.MethodBodyContext context)
        {
           
            //Console.Write(context.GetChild(0).GetText() + "\n");
            /*int x = 0;
            char[] delimeters = { ' ', '.', '(', ')', '\n',};
            string statement = context.GetChild(0).GetText();
          
            string[] tok = statement.Split(delimeters, StringSplitOptions.None);
            int last = tok.Length;
            List<string> tokens = new List<string>(tok);
            tokens.Add("");
           // Console.Write(context.GetText());
            foreach (string token in tokens)
            {
                string rules = token;
                string lookahead = "";
                if (x + 1 < tokens.Count)
                    lookahead = tokens[x + 1];
                else
                    lookahead = "";               
                switch (rules)
                {
                    case "System":
                        C.Add("Console.");
                        x++;
                        break;
                    case "{System":
                        C.Add("{\nConsole.");
                        x++;
                        break;
                    case "out":
                        x++;
                        break;
                    case "println":
                        C.Add("WriteLine(");
                        x++;
                        break;
                    case ";":
                        C.Add(rules + "\n");
                        x++;
                        break;
                    case "int":
                        C.Add(rules+ " ");
                        break;
                    case "=":
                        C.Add(rules + " ");
                        break;
                    case "*=":
                        C.Add(rules + " ");
                        break;
                    case "+=":
                        C.Add(rules + " ");
                        break;
                    case "/=":
                        C.Add(rules + " ");
                        break;
                    case "-=":
                        C.Add(rules + " ");
                        break;
                    case "if":
                        C.Add(rules + "(");
                        break;
                    case "!=":
                        C.Add(rules + " ");
                        break;

                    default:
                        if (rules.StartsWith("\""))
                        {
                            Console.Write(rules + " ");
                            x++;
                            break;
                        }
                        else if (rules.EndsWith("\""))
                        {
                            Console.Write(rules + ")");
                            x++;
                            break;
                        }
                        else if (lookahead == "length")
                        {
                            Console.Write(rules + ".");
                            x++;
                            break;
                        }
                        else if (rules.StartsWith("{"))
                        {
                            Console.Write("{\n" + rules.Substring(1, rules.Length - 1) + " ");
                            x++;
                            break;
                        }
                        else if (rules.EndsWith("}"))
                        {
                            Console.Write(rules.Substring(0, rules.Length - 1) + "\n}");
                            x++;
                            break;
                        }
                        else if(lookahead == ";")
                        {
                            Console.Write(rules + "\n");
                        }
                     
                        else
                        {
                            Console.Write(rules + " ");
                        }
                        break;
                }
                //Console.Write(token + " ");
            }

            //Console.Write(statement);
            //Console.Write(context.GetChild(2).GetText() + "\n");
            C.Add("\n}");?*/
            return VisitChildren(context);
        }
        public override object VisitBlock([NotNull] JavaParser.BlockContext context)
        {
            
            return VisitChildren(context); 
        }
        public override object VisitBlockStatement([NotNull] JavaParser.BlockStatementContext context)
        {
            //Console.Write(context.GetChild(2).GetText());
            return VisitChildren(context);
        }
        public override object VisitStatement([NotNull] JavaParser.StatementContext context)
        {
            dynamic current = context;
            if (context == context.IF())
            {
                Console.Write(context.GetText());
                
            }
            
            
            return VisitChildren(context);
        }
        public override object VisitExpression([NotNull] JavaParser.ExpressionContext context)
        {
            //Console.Write(context.GetText());
            return VisitChildren(context);
        }
        public override object VisitExpressionList([NotNull] JavaParser.ExpressionListContext context)
        {
           // Console.Write(context.GetText());
            return VisitChildren(context);
        }

        public override object VisitPrimary([NotNull] JavaParser.PrimaryContext context)
        {
            dynamic ctx = context;
            
            if (ctx.GetText() == "System")
            {
                Console.Write("Console.");
               
            }
            
            
            return VisitChildren(context);
        }
        public override object VisitMethodCall([NotNull] JavaParser.MethodCallContext context)
        {
            string current = context.GetText();
            
            if (current.Substring(0, 7) == "println")
            {
                string remain = current.Substring(7, current.Length-7);
                Console.Write("WriteLine" + remain +";\n");
            }
            else if (context.Equals(context.THIS()))
            {
                Console.Write(context + " ");
            }
            //Console.Write(context.GetText());
            return VisitChildren(context);
        }
        public override object VisitPrimitiveType([NotNull] JavaParser.PrimitiveTypeContext context)
        {

            return VisitChildren(context);
        }
       
    }
}
